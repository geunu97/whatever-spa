/* TypeScript 컴파일 설정 파일 (https://webpack.kr/guides/typescript/, https://inpa.tistory.com/entry/TS-%F0%9F%93%98-%ED%83%80%EC%9E%85%EC%8A%A4%ED%81%AC%EB%A6%BD%ED%8A%B8-tsconfigjson-%EC%84%A4%EC%A0%95%ED%95%98%EA%B8%B0-%EC%B4%9D%EC%A0%95%EB%A6%AC)
 * compilerOptions.target : 어떠한 버전의 JavaScript 코드로 컴파일 할지 결정
 * compilerOptions.module : 프로그램에서 사용할 모듈 시스템
 * compilerOptions.jsx : JSX 코드를 어떻게 컴파일할지 결정
 * compilerOptions.outDir : 결과물 출력할때 저장할 곳
 * compilerOptions.resolveJsonModule : 확장자가 .json인 파일을 import 허용하는 설정
 * compilerOptions.esModuleInterop : 라이브러리 중에서는 amd(웹) 방식을 전제로 구현된 라이브러리가 있는데 commonjs 방식으로 동작하는 TS에서는 혼란을 줄 수 있다. 상호 운용적(interoperable)으로 사용하기 위해서는 가능한 true로 지정
 * compilerOptions.forceConsistentCasingInFileNames : 파일의 이름을 대소문자 판별하게 하는 옵션
 * compilerOptions.allowJs : TypeScript 프로젝트에서 JavaScript 파일도 사용할 수 있도록 하는 설정, true이면 import 될 수 있다.
 * compilerOptions.sourceMap : 소스맵 '.map' 파일 생성 설정, 이 소스맵 파일은 변환된 js코드가 ts의 어디에 해당하는 지를 알려주어 디버깅 작업에 매우 유용하다.
 * compilerOptions.removeComments : 컴파일 시 타입스크립트 소스의 주석을 모두 제거하는 설정
 * compilerOptions.noEmitOnError : 컴파일 에러가 있으면 js 컴파일 하지 않음
 * compilerOptions.declaration : 컴파일 시 d.ts 파일 생성 여부 (현재쓰는 모든 타입이 정의된 파일)
 * compilerOptions.declarationDir : d.ts 파일 생성 경로
 * compilerOptions.strict : 타입스크립트의 각종 타입 체킹 동작을 전부 활성화, 이 옵션을 쓰지않는것은 곧 타입스크립트를 쓰지 않는 다는 것과 같다.
 * compilerOptions.allowSyntheticDefaultImports : 기본 출력(default export)이 없는 모듈로부터 기본 호출을 허용

 * include : 컴파일할 파일 설정
 * exclude : 제외할 파일 설정
 */

{
  "compilerOptions": {
    "target": "es5",
    "module": "esnext",
    "moduleResolution": "node",
    "outDir": "./build/",
    "resolveJsonModule": true,
    "esModuleInterop": true,
    "forceConsistentCasingInFileNames": true,
    "allowJs": true,
    "sourceMap": true,
    "removeComments": true,
    "noEmitOnError": true,    
    "strict": true,
    "allowSyntheticDefaultImports": true
  },
  "include": ["./src/**/*.ts", "./src/**/*.tsx"]
}